/*
01背包
*/

/*

01背包的两个判断条件
而为条件的01背包
两个条件要在两重循环里
p 1507
*/
/*
#include <iostream>
#include <cstring>
#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;
int v,m,n;
int f[500][500];
int main()
{
    cin>>v>>m>>n;
    for(int i=0;i<n;i++)
    {
        int vv,mm,jk;
        cin>>vv>>mm>>jk;
        for(int g=m;g>=mm;g--)
        {
            for(int j=v;j>=vv;j--)
            f[j][g]=max(f[j][g],f[j-vv][g-mm]+jk);
        }
    }
    cout<<f[v][m]<<endl;
    return 0;
}
*/



/*
完全背包的一点理解

完全背包和01背包之间的区别就是完全背包每个物品都可以重复去取
在这完全背包有两种初始化方式
{
A   {
        dp[0]=1；for(int i=1;i<n;i++)dp[i]=0;
        这种初始化下
        dp[i]是恰好装满体积为i的背包得到的价值
    }
    
B   {
        for(int i=0;i<n;i++)dp[i]=0;
        这种初始化是不是下好的情况下
        dp[i]表示体积小于等于i时背包的最大价值
    }

*/


/*
非常典型的完全背包
A类型的初始化


母牛们不但创建了他们自己的政府而且选择了建立了自己的货币系统。
[In their own rebellious way],，他们对货币的数值感到好奇。
传统地，一个货币系统是由1,5,10,20 或 25,50, 和 100的单位面值组成的。
母牛想知道有多少种不同的方法来用货币系统中的货币来构造一个确定的数值。
举例来说, 使用一个货币系统 {1,2,5,10,...}产生 18单位面值的一些可能的方法是:18x1, 9x2, 8x2+2x1, 3x5+2+1,等等其它。
写一个程序来计算有多少种方法用给定的货币系统来构造一定数量的面值。
保证总数将会适合long long (C/C++) 和 Int64 (Free Pascal)。

输入
输入包含多组测试数据


货币系统中货币的种类数目是 V 。 (1<= V<=25)
要构造的数量钱是 N 。 (1<= N<=10,000)

第 1 行:	 二整数， V 和 N
第 2 ..V+1行：	可用的货币 V 个整数　(每行一个　每行没有其它的数)。
本题是完全背包问题，将每种货币的面值看作是物品的价值
， 将要构造的目标钱数看作是背包总大小，
求的可能的构造方法数即为求使背包恰好装满可能的方案数。
这里，状态转移方程是
dp [ i ] [ v ] = dp [ i - 1 ] [ v ] + dp [ i - 1 ] [ v-v[ i ] ] ，dp[ i ] [ v ]
代表当前能构造出 钱数v的方案数，初始化时 dp[ 0 ] =1 ，
为 0 。最后提醒一下，dp数组要用长整型定义。。。

3 10
1 2 5

10

*/
/*
#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <algorithm>

using namespace std;
int v,n;
long long dp[500000];
int main()
{
    while(scanf("%d%d",&v,&n)!=EOF)
    {
        memset(dp,0,sizeof(dp));
        int a[30];
        for(int i=0;i<v;i++)
        {
            cin>>a[i];
        }
        for(int i=1;i<=n;i++)dp[i]=0;
        dp[0]=1;
        for(int i=0;i<v;i++)
        {
            for(int j=a[i];j<=n;j++)
            {
                dp[j]=dp[j]+dp[j-a[i]];
            }
        }
       cout<<dp[n]<<endl;
    }
    return 0;
}
*/


/*
完全背包的变形
求最小价值

3
10 110
2
1 1
30 50
10 110
2
1 1
50 30
1 6
2
10 3
20 4


The minimum amount of money in the piggy-bank is 60.
The minimum amount of money in the piggy-bank is 100.
This is impossible.

*/
/*
#include <iostream>
#include <cstdio>
#include <string>
#include <cstring>
#include <algorithm>
#include <climits>
using namespace std;

int a,b;
int t;
struct node {
int v;
int w;
double x;
}bb[505];
int dp[100005];

bool cmp(node a,node b)
{
    if(a.x==b.x)
    {
        return a.w>b.w;
    }
    return a.x<b.x;
}
int main()
{
    cin>>t;
    while(t--)
    {
        memset(bb,0,sizeof(bb));
        memset(dp,0,sizeof(dp));
        cin>>a>>b;
        a=b-a;
        int m;
        cin>>m;
        for(int i=0;i<m;i++)
        {
            cin>>bb[i].v>>bb[i].w;
            bb[i].x=(bb[i].v*1.0)/bb[i].w;
        }
        sort(bb,bb+m,cmp);
        for(int i=0;i<=a;i++)dp[i]=1000005;
        dp[0]=0;
        for(int i=0;i<m;i++)
        {
            for(int j=bb[i].w;j<=a;j++)
            {
                dp[j]=min(dp[j],dp[j-bb[i].w]+bb[i].v);
                //cout<<dp[j]<<bb[i].w<<j<<endl;
            }
        }
        if(dp[a]<1000005)
        {
            cout<<"The minimum amount of money in the piggy-bank is "<<dp[a]<<'.'<<endl;
        }
        else
        {
            cout<<"This is impossible."<<endl;
        }
    }
}
*/
